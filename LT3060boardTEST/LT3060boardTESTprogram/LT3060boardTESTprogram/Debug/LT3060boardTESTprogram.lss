
LT3060boardTESTprogram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000017  00800100  00800100  00000a4e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005e9  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b9  00000000  00000000  000010cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002e1  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000019c  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000034d  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000946  00000000  00000000  00001a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  0000239b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	39 c0       	rjmp	.+114    	; 0x94 <__vector_16>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 31       	cpi	r26, 0x17	; 23
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	8c d2       	rcall	.+1304   	; 0x56a <main>
  52:	c1 c4       	rjmp	.+2434   	; 0x9d6 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z7ADC2LEDi>:
uint16_t leds_tmp, leds_capi, leds_capo, leds_zi, leds_zo, leds_zio, leds_zg, leds_v;

uint8_t ADC2LED(int16_t adc)
{
	uint8_t tol = 6;
	if((96 - tol) < adc) return (1 << 5); // 97 - 5.0 V
  56:	8b 35       	cpi	r24, 0x5B	; 91
  58:	91 05       	cpc	r25, r1
  5a:	8c f4       	brge	.+34     	; 0x7e <_Z7ADC2LEDi+0x28>
	if((63 - tol) < adc) return (1 << 4); // 64 - 3.3 V
  5c:	8a 33       	cpi	r24, 0x3A	; 58
  5e:	91 05       	cpc	r25, r1
  60:	84 f4       	brge	.+32     	; 0x82 <_Z7ADC2LEDi+0x2c>
	if((47 - tol) < adc) return (1 << 3); // 48 - 2.5 V
  62:	8a 32       	cpi	r24, 0x2A	; 42
  64:	91 05       	cpc	r25, r1
  66:	7c f4       	brge	.+30     	; 0x86 <_Z7ADC2LEDi+0x30>
	if((34 - tol) < adc) return (1 << 2); // 35 - 1.8 V
  68:	8d 31       	cpi	r24, 0x1D	; 29
  6a:	91 05       	cpc	r25, r1
  6c:	74 f4       	brge	.+28     	; 0x8a <_Z7ADC2LEDi+0x34>
	if((28 - tol) < adc) return (1 << 1); // 29 - 1.5 V
  6e:	87 31       	cpi	r24, 0x17	; 23
  70:	91 05       	cpc	r25, r1
  72:	6c f4       	brge	.+26     	; 0x8e <_Z7ADC2LEDi+0x38>
	if((23 - tol) < adc) return (1 << 0); // 23 - 1.2 V
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	42 97       	sbiw	r24, 0x12	; 18
  78:	5c f4       	brge	.+22     	; 0x90 <_Z7ADC2LEDi+0x3a>
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	09 c0       	rjmp	.+18     	; 0x90 <_Z7ADC2LEDi+0x3a>
uint16_t leds_tmp, leds_capi, leds_capo, leds_zi, leds_zo, leds_zio, leds_zg, leds_v;

uint8_t ADC2LED(int16_t adc)
{
	uint8_t tol = 6;
	if((96 - tol) < adc) return (1 << 5); // 97 - 5.0 V
  7e:	20 e2       	ldi	r18, 0x20	; 32
  80:	07 c0       	rjmp	.+14     	; 0x90 <_Z7ADC2LEDi+0x3a>
	if((63 - tol) < adc) return (1 << 4); // 64 - 3.3 V
  82:	20 e1       	ldi	r18, 0x10	; 16
  84:	05 c0       	rjmp	.+10     	; 0x90 <_Z7ADC2LEDi+0x3a>
	if((47 - tol) < adc) return (1 << 3); // 48 - 2.5 V
  86:	28 e0       	ldi	r18, 0x08	; 8
  88:	03 c0       	rjmp	.+6      	; 0x90 <_Z7ADC2LEDi+0x3a>
	if((34 - tol) < adc) return (1 << 2); // 35 - 1.8 V
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	01 c0       	rjmp	.+2      	; 0x90 <_Z7ADC2LEDi+0x3a>
	if((28 - tol) < adc) return (1 << 1); // 29 - 1.5 V
  8e:	22 e0       	ldi	r18, 0x02	; 2
	if((23 - tol) < adc) return (1 << 0); // 23 - 1.2 V
	return 0;
}
  90:	82 2f       	mov	r24, r18
  92:	08 95       	ret

00000094 <__vector_16>:


ISR (TIMER0_OVF_vect)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	4f 93       	push	r20
  a4:	5f 93       	push	r21
  a6:	6f 93       	push	r22
  a8:	7f 93       	push	r23
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
  ae:	af 93       	push	r26
  b0:	bf 93       	push	r27
	
	
	// display
	uint8_t mask = 0;
	
	if(1 == led_row >> 6){
  b2:	80 91 14 01 	lds	r24, 0x0114
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 2e       	mov	r0, r24
  ba:	89 2f       	mov	r24, r25
  bc:	00 0c       	add	r0, r0
  be:	88 1f       	adc	r24, r24
  c0:	99 0b       	sbc	r25, r25
  c2:	00 0c       	add	r0, r0
  c4:	88 1f       	adc	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	99 f4       	brne	.+38     	; 0xf4 <__vector_16+0x60>
		// line 0
		if(leds & (1 << 13)){
  ce:	80 91 15 01 	lds	r24, 0x0115
  d2:	90 91 16 01 	lds	r25, 0x0116
  d6:	95 fd       	sbrc	r25, 5
  d8:	02 c0       	rjmp	.+4      	; 0xde <__vector_16+0x4a>


	
	
	// display
	uint8_t mask = 0;
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <__vector_16+0x4c>
	
	if(1 == led_row >> 6){
		// line 0
		if(leds & (1 << 13)){
			mask |= (1 << 1);
  de:	22 e0       	ldi	r18, 0x02	; 2
		}
		if(leds & (1 << 9)){
  e0:	91 fd       	sbrc	r25, 1
			mask |= (1 << 2);
  e2:	24 60       	ori	r18, 0x04	; 4
		}
		if(leds & (1 << 10)){
  e4:	92 fd       	sbrc	r25, 2
			mask |= (1 << 6);
  e6:	20 64       	ori	r18, 0x40	; 64
		}
		if(leds & (1 << 11)){
  e8:	93 fd       	sbrc	r25, 3
			mask |= (1 << 7);
  ea:	20 68       	ori	r18, 0x80	; 128
		}
		PORTB = mask;
  ec:	25 b9       	out	0x05, r18	; 5
		DDRB = 1 | mask;
  ee:	21 60       	ori	r18, 0x01	; 1
  f0:	24 b9       	out	0x04, r18	; 4
  f2:	12 c1       	rjmp	.+548    	; 0x318 <__stack+0x19>
	} else if (2 == led_row >> 6){
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	91 05       	cpc	r25, r1
  f8:	81 f4       	brne	.+32     	; 0x11a <__vector_16+0x86>
		// line 1
		if(leds & (1 << 0)){
  fa:	80 91 15 01 	lds	r24, 0x0115
  fe:	90 91 16 01 	lds	r25, 0x0116
 102:	28 2f       	mov	r18, r24
 104:	21 70       	andi	r18, 0x01	; 1
			mask |= (1 << 0);
		}
		if(leds & (1 << 14)){
 106:	96 fd       	sbrc	r25, 6
			mask |= (1 << 2);
 108:	24 60       	ori	r18, 0x04	; 4
		}
		if(leds & (1 << 2)){
 10a:	82 fd       	sbrc	r24, 2
			mask |= (1 << 6);
 10c:	20 64       	ori	r18, 0x40	; 64
		}
		if(leds & (1 << 1)){
 10e:	81 fd       	sbrc	r24, 1
			mask |= (1 << 7);
 110:	20 68       	ori	r18, 0x80	; 128
		}
		PORTB = mask;
 112:	25 b9       	out	0x05, r18	; 5
		DDRB = 2 | mask;  
 114:	22 60       	ori	r18, 0x02	; 2
 116:	24 b9       	out	0x04, r18	; 4
 118:	ff c0       	rjmp	.+510    	; 0x318 <__stack+0x19>
	}else if (3 == led_row >> 6){
 11a:	03 97       	sbiw	r24, 0x03	; 3
 11c:	a1 f4       	brne	.+40     	; 0x146 <__vector_16+0xb2>
		// line 2
		if(leds & (1 << 3)){
 11e:	80 91 15 01 	lds	r24, 0x0115
 122:	90 91 16 01 	lds	r25, 0x0116
 126:	83 fd       	sbrc	r24, 3
 128:	02 c0       	rjmp	.+4      	; 0x12e <__vector_16+0x9a>


	
	
	// display
	uint8_t mask = 0;
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	01 c0       	rjmp	.+2      	; 0x130 <__vector_16+0x9c>
		PORTB = mask;
		DDRB = 2 | mask;  
	}else if (3 == led_row >> 6){
		// line 2
		if(leds & (1 << 3)){
			mask |= (1 << 1);
 12e:	22 e0       	ldi	r18, 0x02	; 2
		}
		if(leds & (1 << 4)){
 130:	84 fd       	sbrc	r24, 4
			mask |= (1 << 0);
 132:	21 60       	ori	r18, 0x01	; 1
		}
		if(leds & (1 << 15)){
 134:	99 23       	and	r25, r25
 136:	0c f4       	brge	.+2      	; 0x13a <__vector_16+0xa6>
			mask |= (1 << 6);
 138:	20 64       	ori	r18, 0x40	; 64
		}
		if(leds & (1 << 5)){
 13a:	85 fd       	sbrc	r24, 5
			mask |= (1 << 7);
 13c:	20 68       	ori	r18, 0x80	; 128
		}
		PORTB = mask;
 13e:	25 b9       	out	0x05, r18	; 5
		DDRB = 4 | mask;
 140:	24 60       	ori	r18, 0x04	; 4
 142:	24 b9       	out	0x04, r18	; 4
 144:	e9 c0       	rjmp	.+466    	; 0x318 <__stack+0x19>
	} else {
		// line 3
		if(leds & (1 << 8)){
 146:	80 91 15 01 	lds	r24, 0x0115
 14a:	90 91 16 01 	lds	r25, 0x0116
 14e:	90 fd       	sbrc	r25, 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <__vector_16+0xc2>


	
	
	// display
	uint8_t mask = 0;
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	01 c0       	rjmp	.+2      	; 0x158 <__vector_16+0xc4>
		PORTB = mask;
		DDRB = 4 | mask;
	} else {
		// line 3
		if(leds & (1 << 8)){
			mask |= (1 << 1);
 156:	22 e0       	ldi	r18, 0x02	; 2
		}
		if(leds & (1 << 7)){
 158:	87 fd       	sbrc	r24, 7
			mask |= (1 << 2);
 15a:	24 60       	ori	r18, 0x04	; 4
		}
		if(leds & (1 << 6)){
 15c:	86 fd       	sbrc	r24, 6
			mask |= (1 << 6);
 15e:	20 64       	ori	r18, 0x40	; 64
		}
		if(leds & (1 << 12)){
 160:	94 fd       	sbrc	r25, 4
			mask |= (1 << 0);
 162:	21 60       	ori	r18, 0x01	; 1
		}
		PORTB = mask;
 164:	25 b9       	out	0x05, r18	; 5
		DDRB = 128 | mask;	
 166:	20 68       	ori	r18, 0x80	; 128
 168:	24 b9       	out	0x04, r18	; 4
		
		x++;
 16a:	40 91 10 01 	lds	r20, 0x0110
 16e:	50 91 11 01 	lds	r21, 0x0111
 172:	60 91 12 01 	lds	r22, 0x0112
 176:	70 91 13 01 	lds	r23, 0x0113
 17a:	4f 5f       	subi	r20, 0xFF	; 255
 17c:	5f 4f       	sbci	r21, 0xFF	; 255
 17e:	6f 4f       	sbci	r22, 0xFF	; 255
 180:	7f 4f       	sbci	r23, 0xFF	; 255
 182:	40 93 10 01 	sts	0x0110, r20
 186:	50 93 11 01 	sts	0x0111, r21
 18a:	60 93 12 01 	sts	0x0112, r22
 18e:	70 93 13 01 	sts	0x0113, r23
		
		if(0 == ((x >> 12) & 7)) if(leds_capi) leds = leds_capi;
 192:	db 01       	movw	r26, r22
 194:	ca 01       	movw	r24, r20
 196:	07 2e       	mov	r0, r23
 198:	7c e0       	ldi	r23, 0x0C	; 12
 19a:	b6 95       	lsr	r27
 19c:	a7 95       	ror	r26
 19e:	97 95       	ror	r25
 1a0:	87 95       	ror	r24
 1a2:	7a 95       	dec	r23
 1a4:	d1 f7       	brne	.-12     	; 0x19a <__vector_16+0x106>
 1a6:	70 2d       	mov	r23, r0
 1a8:	87 70       	andi	r24, 0x07	; 7
 1aa:	99 27       	eor	r25, r25
 1ac:	aa 27       	eor	r26, r26
 1ae:	bb 27       	eor	r27, r27
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	a1 05       	cpc	r26, r1
 1b4:	b1 05       	cpc	r27, r1
 1b6:	61 f4       	brne	.+24     	; 0x1d0 <__vector_16+0x13c>
 1b8:	20 91 0c 01 	lds	r18, 0x010C
 1bc:	30 91 0d 01 	lds	r19, 0x010D
 1c0:	21 15       	cp	r18, r1
 1c2:	31 05       	cpc	r19, r1
 1c4:	39 f1       	breq	.+78     	; 0x214 <__vector_16+0x180>
 1c6:	30 93 16 01 	sts	0x0116, r19
 1ca:	20 93 15 01 	sts	0x0115, r18
 1ce:	22 c0       	rjmp	.+68     	; 0x214 <__vector_16+0x180>
		if(1 == ((x >> 12) & 7)) if(leds_zi) leds = leds_zi;
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	91 05       	cpc	r25, r1
 1d4:	a1 05       	cpc	r26, r1
 1d6:	b1 05       	cpc	r27, r1
 1d8:	61 f4       	brne	.+24     	; 0x1f2 <__vector_16+0x15e>
 1da:	20 91 08 01 	lds	r18, 0x0108
 1de:	30 91 09 01 	lds	r19, 0x0109
 1e2:	21 15       	cp	r18, r1
 1e4:	31 05       	cpc	r19, r1
 1e6:	31 f1       	breq	.+76     	; 0x234 <__vector_16+0x1a0>
 1e8:	30 93 16 01 	sts	0x0116, r19
 1ec:	20 93 15 01 	sts	0x0115, r18
 1f0:	21 c0       	rjmp	.+66     	; 0x234 <__vector_16+0x1a0>
		if(2 == ((x >> 12) & 7)) if(leds_zg) leds = leds_zg;
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	91 05       	cpc	r25, r1
 1f6:	a1 05       	cpc	r26, r1
 1f8:	b1 05       	cpc	r27, r1
 1fa:	61 f4       	brne	.+24     	; 0x214 <__vector_16+0x180>
 1fc:	20 91 02 01 	lds	r18, 0x0102
 200:	30 91 03 01 	lds	r19, 0x0103
 204:	21 15       	cp	r18, r1
 206:	31 05       	cpc	r19, r1
 208:	29 f1       	breq	.+74     	; 0x254 <__vector_16+0x1c0>
 20a:	30 93 16 01 	sts	0x0116, r19
 20e:	20 93 15 01 	sts	0x0115, r18
 212:	20 c0       	rjmp	.+64     	; 0x254 <__vector_16+0x1c0>
		if(3 == ((x >> 12) & 7)) if(leds_capo) leds = leds_capo;
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	91 05       	cpc	r25, r1
 218:	a1 05       	cpc	r26, r1
 21a:	b1 05       	cpc	r27, r1
 21c:	59 f4       	brne	.+22     	; 0x234 <__vector_16+0x1a0>
 21e:	80 91 0a 01 	lds	r24, 0x010A
 222:	90 91 0b 01 	lds	r25, 0x010B
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	19 f1       	breq	.+70     	; 0x270 <__vector_16+0x1dc>
 22a:	90 93 16 01 	sts	0x0116, r25
 22e:	80 93 15 01 	sts	0x0115, r24
 232:	1e c0       	rjmp	.+60     	; 0x270 <__vector_16+0x1dc>
		if(4 == ((x >> 12) & 7)) if(leds_zo) leds = leds_zo;
 234:	84 30       	cpi	r24, 0x04	; 4
 236:	91 05       	cpc	r25, r1
 238:	a1 05       	cpc	r26, r1
 23a:	b1 05       	cpc	r27, r1
 23c:	59 f4       	brne	.+22     	; 0x254 <__vector_16+0x1c0>
 23e:	80 91 06 01 	lds	r24, 0x0106
 242:	90 91 07 01 	lds	r25, 0x0107
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	99 f0       	breq	.+38     	; 0x270 <__vector_16+0x1dc>
 24a:	90 93 16 01 	sts	0x0116, r25
 24e:	80 93 15 01 	sts	0x0115, r24
 252:	0e c0       	rjmp	.+28     	; 0x270 <__vector_16+0x1dc>
		if(5 == ((x >> 12) & 7)) if(leds_zio) leds = leds_zio;
 254:	05 97       	sbiw	r24, 0x05	; 5
 256:	a1 05       	cpc	r26, r1
 258:	b1 05       	cpc	r27, r1
 25a:	51 f4       	brne	.+20     	; 0x270 <__vector_16+0x1dc>
 25c:	80 91 04 01 	lds	r24, 0x0104
 260:	90 91 05 01 	lds	r25, 0x0105
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	21 f0       	breq	.+8      	; 0x270 <__vector_16+0x1dc>
 268:	90 93 16 01 	sts	0x0116, r25
 26c:	80 93 15 01 	sts	0x0115, r24

		leds_tmp = leds_capi | leds_capo | leds_zi | leds_zo | leds_zio | leds_zg | leds_v;
 270:	20 91 0a 01 	lds	r18, 0x010A
 274:	30 91 0b 01 	lds	r19, 0x010B
 278:	80 91 0c 01 	lds	r24, 0x010C
 27c:	90 91 0d 01 	lds	r25, 0x010D
 280:	82 2b       	or	r24, r18
 282:	93 2b       	or	r25, r19
 284:	20 91 08 01 	lds	r18, 0x0108
 288:	30 91 09 01 	lds	r19, 0x0109
 28c:	82 2b       	or	r24, r18
 28e:	93 2b       	or	r25, r19
 290:	20 91 06 01 	lds	r18, 0x0106
 294:	30 91 07 01 	lds	r19, 0x0107
 298:	82 2b       	or	r24, r18
 29a:	93 2b       	or	r25, r19
 29c:	20 91 04 01 	lds	r18, 0x0104
 2a0:	30 91 05 01 	lds	r19, 0x0105
 2a4:	82 2b       	or	r24, r18
 2a6:	93 2b       	or	r25, r19
 2a8:	20 91 02 01 	lds	r18, 0x0102
 2ac:	30 91 03 01 	lds	r19, 0x0103
 2b0:	82 2b       	or	r24, r18
 2b2:	93 2b       	or	r25, r19
 2b4:	20 91 00 01 	lds	r18, 0x0100
 2b8:	30 91 01 01 	lds	r19, 0x0101
 2bc:	82 2b       	or	r24, r18
 2be:	93 2b       	or	r25, r19
		if(!(leds_tmp & (1 << 13))) leds = leds_tmp |= (1 << 12);
 2c0:	95 ff       	sbrs	r25, 5
 2c2:	05 c0       	rjmp	.+10     	; 0x2ce <__vector_16+0x23a>
		if(2 == ((x >> 12) & 7)) if(leds_zg) leds = leds_zg;
		if(3 == ((x >> 12) & 7)) if(leds_capo) leds = leds_capo;
		if(4 == ((x >> 12) & 7)) if(leds_zo) leds = leds_zo;
		if(5 == ((x >> 12) & 7)) if(leds_zio) leds = leds_zio;

		leds_tmp = leds_capi | leds_capo | leds_zi | leds_zo | leds_zio | leds_zg | leds_v;
 2c4:	90 93 0f 01 	sts	0x010F, r25
 2c8:	80 93 0e 01 	sts	0x010E, r24
 2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <__vector_16+0x24c>
		if(!(leds_tmp & (1 << 13))) leds = leds_tmp |= (1 << 12);
 2ce:	90 61       	ori	r25, 0x10	; 16
 2d0:	90 93 0f 01 	sts	0x010F, r25
 2d4:	80 93 0e 01 	sts	0x010E, r24
 2d8:	90 93 16 01 	sts	0x0116, r25
 2dc:	80 93 15 01 	sts	0x0115, r24
		if(6 == ((x >> 13) & 7)) if(leds_tmp) leds = leds_tmp;
 2e0:	03 2e       	mov	r0, r19
 2e2:	3d e0       	ldi	r19, 0x0D	; 13
 2e4:	76 95       	lsr	r23
 2e6:	67 95       	ror	r22
 2e8:	57 95       	ror	r21
 2ea:	47 95       	ror	r20
 2ec:	3a 95       	dec	r19
 2ee:	d1 f7       	brne	.-12     	; 0x2e4 <__vector_16+0x250>
 2f0:	30 2d       	mov	r19, r0
 2f2:	47 70       	andi	r20, 0x07	; 7
 2f4:	55 27       	eor	r21, r21
 2f6:	66 27       	eor	r22, r22
 2f8:	77 27       	eor	r23, r23
 2fa:	46 30       	cpi	r20, 0x06	; 6
 2fc:	51 05       	cpc	r21, r1
 2fe:	61 05       	cpc	r22, r1
 300:	71 05       	cpc	r23, r1
 302:	51 f4       	brne	.+20     	; 0x318 <__stack+0x19>
 304:	80 91 0e 01 	lds	r24, 0x010E
 308:	90 91 0f 01 	lds	r25, 0x010F
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	21 f0       	breq	.+8      	; 0x318 <__stack+0x19>
 310:	90 93 16 01 	sts	0x0116, r25
 314:	80 93 15 01 	sts	0x0115, r24
		
		
	}
	led_row++;
 318:	80 91 14 01 	lds	r24, 0x0114
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	80 93 14 01 	sts	0x0114, r24


	
}
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	7f 91       	pop	r23
 32c:	6f 91       	pop	r22
 32e:	5f 91       	pop	r21
 330:	4f 91       	pop	r20
 332:	3f 91       	pop	r19
 334:	2f 91       	pop	r18
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <_Z15ADC_blocking_ina>:
}
*/

int16_t ADC_blocking_in(int8_t channel)
{
	ADMUX = (1 << REFS1) | (1 << REFS0) | channel;
 340:	80 6c       	ori	r24, 0xC0	; 192
 342:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (0 << ADIE) | (1 << ADSC) | (0 << ADATE) | 6;
 346:	86 ec       	ldi	r24, 0xC6	; 198
 348:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0;
 34c:	10 92 7b 00 	sts	0x007B, r1
	while(!(ADCSRA & (1 << ADIF)));
 350:	ea e7       	ldi	r30, 0x7A	; 122
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	84 ff       	sbrs	r24, 4
 358:	fd cf       	rjmp	.-6      	; 0x354 <_Z15ADC_blocking_ina+0x14>
	ADCSRA |= (1 << ADIF);
 35a:	ea e7       	ldi	r30, 0x7A	; 122
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	80 61       	ori	r24, 0x10	; 16
 362:	80 83       	st	Z, r24
	return ADC;
 364:	80 91 78 00 	lds	r24, 0x0078
 368:	90 91 79 00 	lds	r25, 0x0079
}
 36c:	08 95       	ret

0000036e <_Z15CAP_blocking_inal>:

int32_t CAP_blocking_in(int8_t chan, int32_t Ucc)
{
 36e:	4f 92       	push	r4
 370:	5f 92       	push	r5
 372:	6f 92       	push	r6
 374:	7f 92       	push	r7
 376:	8f 92       	push	r8
 378:	9f 92       	push	r9
 37a:	af 92       	push	r10
 37c:	bf 92       	push	r11
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	18 2f       	mov	r17, r24
 38e:	4a 01       	movw	r8, r20
 390:	5b 01       	movw	r10, r22
	int32_t C, Ucap;
	int16_t i, k;
	Ucap = 0;
	k = 1000;
	for(i=0;i<k;i++){ // Ucapi += 16 for 1uF
 392:	c0 e0       	ldi	r28, 0x00	; 0
 394:	d0 e0       	ldi	r29, 0x00	; 0
		Ucap = ADC_blocking_in(2);
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	d3 df       	rcall	.-90     	; 0x340 <_Z15ADC_blocking_ina>
 39a:	6c 01       	movw	r12, r24
 39c:	ee 24       	eor	r14, r14
 39e:	d7 fc       	sbrc	r13, 7
 3a0:	e0 94       	com	r14
 3a2:	fe 2c       	mov	r15, r14
		Ucap -= ADC_blocking_in(chan);
 3a4:	81 2f       	mov	r24, r17
 3a6:	cc df       	rcall	.-104    	; 0x340 <_Z15ADC_blocking_ina>
 3a8:	aa 27       	eor	r26, r26
 3aa:	97 fd       	sbrc	r25, 7
 3ac:	a0 95       	com	r26
 3ae:	ba 2f       	mov	r27, r26
 3b0:	a7 01       	movw	r20, r14
 3b2:	96 01       	movw	r18, r12
 3b4:	28 1b       	sub	r18, r24
 3b6:	39 0b       	sbc	r19, r25
 3b8:	4a 0b       	sbc	r20, r26
 3ba:	5b 0b       	sbc	r21, r27
		if (Ucap > 100) break;
 3bc:	25 36       	cpi	r18, 0x65	; 101
 3be:	31 05       	cpc	r19, r1
 3c0:	41 05       	cpc	r20, r1
 3c2:	51 05       	cpc	r21, r1
 3c4:	2c f4       	brge	.+10     	; 0x3d0 <_Z15CAP_blocking_inal+0x62>
{
	int32_t C, Ucap;
	int16_t i, k;
	Ucap = 0;
	k = 1000;
	for(i=0;i<k;i++){ // Ucapi += 16 for 1uF
 3c6:	21 96       	adiw	r28, 0x01	; 1
 3c8:	c8 3e       	cpi	r28, 0xE8	; 232
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	d8 07       	cpc	r29, r24
 3ce:	19 f7       	brne	.-58     	; 0x396 <_Z15CAP_blocking_inal+0x28>
		Ucap = ADC_blocking_in(2);
		Ucap -= ADC_blocking_in(chan);
		if (Ucap > 100) break;
	}
	Ucap = Ucap * 1000 / i; // 16000 for 1 uF
 3d0:	a8 ee       	ldi	r26, 0xE8	; 232
 3d2:	b3 e0       	ldi	r27, 0x03	; 3
 3d4:	c8 d2       	rcall	.+1424   	; 0x966 <__muluhisi3>
 3d6:	2b 01       	movw	r4, r22
 3d8:	3c 01       	movw	r6, r24
	C = 42*(Ucc - 120000) / Ucap; // Ci in 1 nF	
 3da:	a5 01       	movw	r20, r10
 3dc:	94 01       	movw	r18, r8
 3de:	20 5c       	subi	r18, 0xC0	; 192
 3e0:	34 4d       	sbci	r19, 0xD4	; 212
 3e2:	41 40       	sbci	r20, 0x01	; 1
 3e4:	51 09       	sbc	r21, r1
 3e6:	aa e2       	ldi	r26, 0x2A	; 42
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	bd d2       	rcall	.+1402   	; 0x966 <__muluhisi3>
 3ec:	6b 01       	movw	r12, r22
 3ee:	7c 01       	movw	r14, r24
	for(i=0;i<k;i++){ // Ucapi += 16 for 1uF
		Ucap = ADC_blocking_in(2);
		Ucap -= ADC_blocking_in(chan);
		if (Ucap > 100) break;
	}
	Ucap = Ucap * 1000 / i; // 16000 for 1 uF
 3f0:	9e 01       	movw	r18, r28
 3f2:	44 27       	eor	r20, r20
 3f4:	37 fd       	sbrc	r19, 7
 3f6:	40 95       	com	r20
 3f8:	54 2f       	mov	r21, r20
 3fa:	c3 01       	movw	r24, r6
 3fc:	b2 01       	movw	r22, r4
 3fe:	97 d2       	rcall	.+1326   	; 0x92e <__divmodsi4>
	C = 42*(Ucc - 120000) / Ucap; // Ci in 1 nF	
 400:	c7 01       	movw	r24, r14
 402:	b6 01       	movw	r22, r12
 404:	94 d2       	rcall	.+1320   	; 0x92e <__divmodsi4>
	return C;
}
 406:	ca 01       	movw	r24, r20
 408:	b9 01       	movw	r22, r18
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	bf 90       	pop	r11
 41a:	af 90       	pop	r10
 41c:	9f 90       	pop	r9
 41e:	8f 90       	pop	r8
 420:	7f 90       	pop	r7
 422:	6f 90       	pop	r6
 424:	5f 90       	pop	r5
 426:	4f 90       	pop	r4
 428:	08 95       	ret

0000042a <_Z22measure_vreg_outp_voltv>:


int32_t measure_vreg_outp_volt(void)
{
 42a:	cf 92       	push	r12
 42c:	df 92       	push	r13
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	c8 ee       	ldi	r28, 0xE8	; 232
 438:	d3 e0       	ldi	r29, 0x03	; 3
	int32_t Uout;
	int16_t i, k;
	Uout = 0;
 43a:	c1 2c       	mov	r12, r1
 43c:	d1 2c       	mov	r13, r1
 43e:	76 01       	movw	r14, r12
	k = 1000;
	for(i=0;i<k;i++){
		Uout += ADC_blocking_in(1);
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	7e df       	rcall	.-260    	; 0x340 <_Z15ADC_blocking_ina>
 444:	aa 27       	eor	r26, r26
 446:	97 fd       	sbrc	r25, 7
 448:	a0 95       	com	r26
 44a:	ba 2f       	mov	r27, r26
 44c:	c8 0e       	add	r12, r24
 44e:	d9 1e       	adc	r13, r25
 450:	ea 1e       	adc	r14, r26
 452:	fb 1e       	adc	r15, r27
		Uout -= ADC_blocking_in(2);
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	74 df       	rcall	.-280    	; 0x340 <_Z15ADC_blocking_ina>
 458:	aa 27       	eor	r26, r26
 45a:	97 fd       	sbrc	r25, 7
 45c:	a0 95       	com	r26
 45e:	ba 2f       	mov	r27, r26
 460:	c8 1a       	sub	r12, r24
 462:	d9 0a       	sbc	r13, r25
 464:	ea 0a       	sbc	r14, r26
 466:	fb 0a       	sbc	r15, r27
 468:	21 97       	sbiw	r28, 0x01	; 1
{
	int32_t Uout;
	int16_t i, k;
	Uout = 0;
	k = 1000;
	for(i=0;i<k;i++){
 46a:	20 97       	sbiw	r28, 0x00	; 0
 46c:	49 f7       	brne	.-46     	; 0x440 <_Z22measure_vreg_outp_voltv+0x16>
		Uout += ADC_blocking_in(1);
		Uout -= ADC_blocking_in(2);
	}
	Uout /= k;	
 46e:	c7 01       	movw	r24, r14
 470:	b6 01       	movw	r22, r12
 472:	28 ee       	ldi	r18, 0xE8	; 232
 474:	33 e0       	ldi	r19, 0x03	; 3
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	59 d2       	rcall	.+1202   	; 0x92e <__divmodsi4>
	return Uout;
}
 47c:	ca 01       	movw	r24, r20
 47e:	b9 01       	movw	r22, r18
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	ff 90       	pop	r15
 486:	ef 90       	pop	r14
 488:	df 90       	pop	r13
 48a:	cf 90       	pop	r12
 48c:	08 95       	ret

0000048e <_Z21measure_vreg_inp_voltv>:


int32_t measure_vreg_inp_volt(void)
{
 48e:	cf 92       	push	r12
 490:	df 92       	push	r13
 492:	ef 92       	push	r14
 494:	ff 92       	push	r15
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	c8 ee       	ldi	r28, 0xE8	; 232
 49c:	d3 e0       	ldi	r29, 0x03	; 3
	int32_t Uout;
	int16_t i, k;
	Uout = 0;
 49e:	c1 2c       	mov	r12, r1
 4a0:	d1 2c       	mov	r13, r1
 4a2:	76 01       	movw	r14, r12
	k = 1000;
	for(i=0;i<k;i++){
		Uout += ADC_blocking_in(3);
 4a4:	83 e0       	ldi	r24, 0x03	; 3
 4a6:	4c df       	rcall	.-360    	; 0x340 <_Z15ADC_blocking_ina>
 4a8:	aa 27       	eor	r26, r26
 4aa:	97 fd       	sbrc	r25, 7
 4ac:	a0 95       	com	r26
 4ae:	ba 2f       	mov	r27, r26
 4b0:	c8 0e       	add	r12, r24
 4b2:	d9 1e       	adc	r13, r25
 4b4:	ea 1e       	adc	r14, r26
 4b6:	fb 1e       	adc	r15, r27
		Uout -= ADC_blocking_in(2);
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	42 df       	rcall	.-380    	; 0x340 <_Z15ADC_blocking_ina>
 4bc:	aa 27       	eor	r26, r26
 4be:	97 fd       	sbrc	r25, 7
 4c0:	a0 95       	com	r26
 4c2:	ba 2f       	mov	r27, r26
 4c4:	c8 1a       	sub	r12, r24
 4c6:	d9 0a       	sbc	r13, r25
 4c8:	ea 0a       	sbc	r14, r26
 4ca:	fb 0a       	sbc	r15, r27
 4cc:	21 97       	sbiw	r28, 0x01	; 1
{
	int32_t Uout;
	int16_t i, k;
	Uout = 0;
	k = 1000;
	for(i=0;i<k;i++){
 4ce:	20 97       	sbiw	r28, 0x00	; 0
 4d0:	49 f7       	brne	.-46     	; 0x4a4 <_Z21measure_vreg_inp_voltv+0x16>
		Uout += ADC_blocking_in(3);
		Uout -= ADC_blocking_in(2);
	}
	Uout /= k;
 4d2:	c7 01       	movw	r24, r14
 4d4:	b6 01       	movw	r22, r12
 4d6:	28 ee       	ldi	r18, 0xE8	; 232
 4d8:	33 e0       	ldi	r19, 0x03	; 3
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	27 d2       	rcall	.+1102   	; 0x92e <__divmodsi4>
	return Uout;
}
 4e0:	ca 01       	movw	r24, r20
 4e2:	b9 01       	movw	r22, r18
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	ff 90       	pop	r15
 4ea:	ef 90       	pop	r14
 4ec:	df 90       	pop	r13
 4ee:	cf 90       	pop	r12
 4f0:	08 95       	ret

000004f2 <_Z23measure_vreg_inout_voltv>:

int32_t measure_vreg_inout_volt(void)
{
 4f2:	cf 92       	push	r12
 4f4:	df 92       	push	r13
 4f6:	ef 92       	push	r14
 4f8:	ff 92       	push	r15
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	c8 ee       	ldi	r28, 0xE8	; 232
 500:	d3 e0       	ldi	r29, 0x03	; 3
	int32_t Uout;
	int16_t i, k;
	Uout = 0;
 502:	c1 2c       	mov	r12, r1
 504:	d1 2c       	mov	r13, r1
 506:	76 01       	movw	r14, r12
	k = 1000;
	for(i=0;i<k;i++){
		Uout += ADC_blocking_in(3);
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	1a df       	rcall	.-460    	; 0x340 <_Z15ADC_blocking_ina>
 50c:	aa 27       	eor	r26, r26
 50e:	97 fd       	sbrc	r25, 7
 510:	a0 95       	com	r26
 512:	ba 2f       	mov	r27, r26
 514:	c8 0e       	add	r12, r24
 516:	d9 1e       	adc	r13, r25
 518:	ea 1e       	adc	r14, r26
 51a:	fb 1e       	adc	r15, r27
		Uout -= ADC_blocking_in(1);
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	10 df       	rcall	.-480    	; 0x340 <_Z15ADC_blocking_ina>
 520:	aa 27       	eor	r26, r26
 522:	97 fd       	sbrc	r25, 7
 524:	a0 95       	com	r26
 526:	ba 2f       	mov	r27, r26
 528:	c8 1a       	sub	r12, r24
 52a:	d9 0a       	sbc	r13, r25
 52c:	ea 0a       	sbc	r14, r26
 52e:	fb 0a       	sbc	r15, r27
 530:	21 97       	sbiw	r28, 0x01	; 1
{
	int32_t Uout;
	int16_t i, k;
	Uout = 0;
	k = 1000;
	for(i=0;i<k;i++){
 532:	20 97       	sbiw	r28, 0x00	; 0
 534:	49 f7       	brne	.-46     	; 0x508 <_Z23measure_vreg_inout_voltv+0x16>
		Uout += ADC_blocking_in(3);
		Uout -= ADC_blocking_in(1);
	}
	Uout /= k;
 536:	c7 01       	movw	r24, r14
 538:	b6 01       	movw	r22, r12
 53a:	28 ee       	ldi	r18, 0xE8	; 232
 53c:	33 e0       	ldi	r19, 0x03	; 3
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	f5 d1       	rcall	.+1002   	; 0x92e <__divmodsi4>
	return Uout;
}
 544:	ca 01       	movw	r24, r20
 546:	b9 01       	movw	r22, r18
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	ff 90       	pop	r15
 54e:	ef 90       	pop	r14
 550:	df 90       	pop	r13
 552:	cf 90       	pop	r12
 554:	08 95       	ret

00000556 <_Z13start_step_upl>:

void start_step_up(int32_t Ucc)
{
 556:	9b 01       	movw	r18, r22
 558:	ac 01       	movw	r20, r24
	OCR0A = 70 * 200000/Ucc +132;
 55a:	60 e8       	ldi	r22, 0x80	; 128
 55c:	7f e9       	ldi	r23, 0x9F	; 159
 55e:	85 ed       	ldi	r24, 0xD5	; 213
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	e5 d1       	rcall	.+970    	; 0x92e <__divmodsi4>
 564:	2c 57       	subi	r18, 0x7C	; 124
 566:	27 bd       	out	0x27, r18	; 39
 568:	08 95       	ret

0000056a <main>:
{

	int32_t Uout, Ci, Co, Ucc, Uin, Uinout;
	int16_t i, k;

	DDRD = 255;
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	8a b9       	out	0x0a, r24	; 10
	DDRC = 1 << 5;
 56e:	80 e2       	ldi	r24, 0x20	; 32
 570:	87 b9       	out	0x07, r24	; 7
	DDRB = 199;
 572:	87 ec       	ldi	r24, 0xC7	; 199
 574:	84 b9       	out	0x04, r24	; 4
	PORTD = 1;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	8b b9       	out	0x0b, r24	; 11
	TCNT0 = 0;
 57a:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0; //192;
 57c:	17 bc       	out	0x27, r1	; 39
	//OCR0A = 192;
	TCCR0A = (1 << COM0A1) | (1 << WGM00) | (1 << WGM01);
 57e:	93 e8       	ldi	r25, 0x83	; 131
 580:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00);
 582:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);
 584:	80 93 6e 00 	sts	0x006E, r24
	
	ADMUX = (1 << REFS1) | (1 << REFS0) | 1;
 588:	81 ec       	ldi	r24, 0xC1	; 193
 58a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADSC) | (1 << ADATE) | 7;
 58e:	8f ee       	ldi	r24, 0xEF	; 239
 590:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0;
 594:	10 92 7b 00 	sts	0x007B, r1
	sei();
 598:	78 94       	sei
  
  
	PORTC = 0;
 59a:	18 b8       	out	0x08, r1	; 8
	PORTD = 1+8;
 59c:	89 e0       	ldi	r24, 0x09	; 9
 59e:	8b b9       	out	0x0b, r24	; 11
{
	OCR0A = 0;
}

int main(void)
{
 5a0:	0f 2e       	mov	r0, r31
 5a2:	f8 ee       	ldi	r31, 0xE8	; 232
 5a4:	6f 2e       	mov	r6, r31
 5a6:	f0 2d       	mov	r31, r0
 5a8:	0f 2e       	mov	r0, r31
 5aa:	f3 e0       	ldi	r31, 0x03	; 3
 5ac:	7f 2e       	mov	r7, r31
 5ae:	f0 2d       	mov	r31, r0
 5b0:	81 2c       	mov	r8, r1
 5b2:	91 2c       	mov	r9, r1
 5b4:	a1 2c       	mov	r10, r1
 5b6:	b1 2c       	mov	r11, r1
			continue;
		}
		
		// capacity measurement
		PORTD = (1 << 5) | (1 << 3);
		PORTC = (1 << 5);
 5b8:	0f 2e       	mov	r0, r31
 5ba:	f4 e6       	ldi	r31, 0x64	; 100
 5bc:	4f 2e       	mov	r4, r31
 5be:	f0 2d       	mov	r31, r0
 5c0:	51 2c       	mov	r5, r1
		//if(leds_capo) leds = leds_capo;

		//leds = leds_tmp;
		PORTD = 0;
		PORTC = 0;
		start_step_up(Ucc);
 5c2:	68 94       	set
 5c4:	33 24       	eor	r3, r3
 5c6:	34 f8       	bld	r3, 4
 5c8:	0f 2e       	mov	r0, r31
 5ca:	f7 e2       	ldi	r31, 0x27	; 39
 5cc:	2f 2e       	mov	r2, r31
 5ce:	f0 2d       	mov	r31, r0
		if(Uinout > 870){
			leds_zio = (1 << 10) | (1 << 13) | (1 << 14) | (1 << 6) | (1 << 8); // overvoltage protection not working, too high voltage
		} else if(Uinout < 50) {
			leds_zio = (1 << 11) | (1 << 13) | (1 << 6) | (1 << 8); // overvoltage protection diode short circuit
		} else if(Uinout < 600){
			leds_zio = (1 << 10) | (1 << 13) | (1 << 15) | (1 << 6) | (1 << 8); // overvoltage protection with too low breakdown voltage
 5d0:	00 e4       	ldi	r16, 0x40	; 64
 5d2:	15 ea       	ldi	r17, 0xA5	; 165
	
	//while(1){}
  
    while(1)
    {
		PORTD = (1 << 5) | (1 << 3);
 5d4:	88 e2       	ldi	r24, 0x28	; 40
 5d6:	8b b9       	out	0x0b, r24	; 11
		PORTC = (1 << 5);
 5d8:	80 e2       	ldi	r24, 0x20	; 32
 5da:	88 b9       	out	0x08, r24	; 8
		measure_vreg_outp_volt(); // wait
 5dc:	26 df       	rcall	.-436    	; 0x42a <_Z22measure_vreg_outp_voltv>
		// check output voltage
		PORTC = 0;
 5de:	18 b8       	out	0x08, r1	; 8
		PORTD = 1 + 8;
 5e0:	89 e0       	ldi	r24, 0x09	; 9
 5e2:	8b b9       	out	0x0b, r24	; 11
		measure_vreg_outp_volt(); // dummy read/wait
 5e4:	22 df       	rcall	.-444    	; 0x42a <_Z22measure_vreg_outp_voltv>
		Uout = measure_vreg_outp_volt();
 5e6:	21 df       	rcall	.-446    	; 0x42a <_Z22measure_vreg_outp_voltv>
 5e8:	6b 01       	movw	r12, r22
 5ea:	7c 01       	movw	r14, r24
		leds_v = ADC2LED(Uout);
 5ec:	cb 01       	movw	r24, r22
 5ee:	33 dd       	rcall	.-1434   	; 0x56 <_Z7ADC2LEDi>
 5f0:	90 e0       	ldi	r25, 0x00	; 0
		if(Uout > 150) {
 5f2:	27 e9       	ldi	r18, 0x97	; 151
 5f4:	c2 16       	cp	r12, r18
 5f6:	d1 04       	cpc	r13, r1
 5f8:	e1 04       	cpc	r14, r1
 5fa:	f1 04       	cpc	r15, r1
 5fc:	34 f0       	brlt	.+12     	; 0x60a <main+0xa0>
			leds_v |= (1 << 13) | (1 << 14) | (1 << 8);
 5fe:	91 66       	ori	r25, 0x61	; 97
 600:	90 93 01 01 	sts	0x0101, r25
 604:	80 93 00 01 	sts	0x0100, r24
 608:	8b c1       	rjmp	.+790    	; 0x920 <main+0x3b6>

		} else if (Uout < 11) {
 60a:	3b e0       	ldi	r19, 0x0B	; 11
 60c:	c3 16       	cp	r12, r19
 60e:	d1 04       	cpc	r13, r1
 610:	e1 04       	cpc	r14, r1
 612:	f1 04       	cpc	r15, r1
 614:	0c f0       	brlt	.+2      	; 0x618 <main+0xae>
 616:	80 c1       	rjmp	.+768    	; 0x918 <main+0x3ae>
			leds_v |= (1 << 13) | (1 << 15) | (1 << 8);
 618:	91 6a       	ori	r25, 0xA1	; 161
 61a:	90 93 01 01 	sts	0x0101, r25
 61e:	80 93 00 01 	sts	0x0100, r24
 622:	7e c1       	rjmp	.+764    	; 0x920 <main+0x3b6>
		// check input capacity - reverse (!), regulator and output cap off 
		// get supply voltage for capacity measurement
		Ucc = 0;
		k = 1000;
		for(i=0;i<k;i++){
			Ucc += ADC_blocking_in(0);
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	8c de       	rcall	.-744    	; 0x340 <_Z15ADC_blocking_ina>
 628:	aa 27       	eor	r26, r26
 62a:	97 fd       	sbrc	r25, 7
 62c:	a0 95       	com	r26
 62e:	ba 2f       	mov	r27, r26
 630:	c8 0e       	add	r12, r24
 632:	d9 1e       	adc	r13, r25
 634:	ea 1e       	adc	r14, r26
 636:	fb 1e       	adc	r15, r27
 638:	21 97       	sbiw	r28, 0x01	; 1
		
		// check input capacity - reverse (!), regulator and output cap off 
		// get supply voltage for capacity measurement
		Ucc = 0;
		k = 1000;
		for(i=0;i<k;i++){
 63a:	20 97       	sbiw	r28, 0x00	; 0
 63c:	99 f7       	brne	.-26     	; 0x624 <main+0xba>
			Ucc += ADC_blocking_in(0);
		}
		if(Ucc < 200000){
 63e:	40 e4       	ldi	r20, 0x40	; 64
 640:	c4 16       	cp	r12, r20
 642:	4d e0       	ldi	r20, 0x0D	; 13
 644:	d4 06       	cpc	r13, r20
 646:	43 e0       	ldi	r20, 0x03	; 3
 648:	e4 06       	cpc	r14, r20
 64a:	f1 04       	cpc	r15, r1
 64c:	74 f4       	brge	.+28     	; 0x66a <main+0x100>
			leds_tmp |= (1 << 13) | (1 << 15);
 64e:	80 91 0e 01 	lds	r24, 0x010E
 652:	90 91 0f 01 	lds	r25, 0x010F
 656:	90 6a       	ori	r25, 0xA0	; 160
 658:	90 93 0f 01 	sts	0x010F, r25
 65c:	80 93 0e 01 	sts	0x010E, r24
			leds = leds_tmp;
 660:	90 93 16 01 	sts	0x0116, r25
 664:	80 93 15 01 	sts	0x0115, r24
			continue;
 668:	b5 cf       	rjmp	.-150    	; 0x5d4 <main+0x6a>
		} else if(Ucc > 250000){
 66a:	51 e9       	ldi	r21, 0x91	; 145
 66c:	c5 16       	cp	r12, r21
 66e:	50 ed       	ldi	r21, 0xD0	; 208
 670:	d5 06       	cpc	r13, r21
 672:	53 e0       	ldi	r21, 0x03	; 3
 674:	e5 06       	cpc	r14, r21
 676:	f1 04       	cpc	r15, r1
 678:	74 f0       	brlt	.+28     	; 0x696 <main+0x12c>
			leds_tmp |= (1 << 13) | (1 << 14);
 67a:	80 91 0e 01 	lds	r24, 0x010E
 67e:	90 91 0f 01 	lds	r25, 0x010F
 682:	90 66       	ori	r25, 0x60	; 96
 684:	90 93 0f 01 	sts	0x010F, r25
 688:	80 93 0e 01 	sts	0x010E, r24
			leds = leds_tmp;
 68c:	90 93 16 01 	sts	0x0116, r25
 690:	80 93 15 01 	sts	0x0115, r24
			continue;
 694:	9f cf       	rjmp	.-194    	; 0x5d4 <main+0x6a>
		}
		
		// capacity measurement
		PORTD = (1 << 5) | (1 << 3);
 696:	88 e2       	ldi	r24, 0x28	; 40
 698:	8b b9       	out	0x0b, r24	; 11
		PORTC = (1 << 5);
 69a:	80 e2       	ldi	r24, 0x20	; 32
 69c:	88 b9       	out	0x08, r24	; 8
 69e:	84 2d       	mov	r24, r4
 6a0:	95 2d       	mov	r25, r5
 6a2:	01 97       	sbiw	r24, 0x01	; 1
		for(i=0;i<100;i++);
 6a4:	00 97       	sbiw	r24, 0x00	; 0
 6a6:	e9 f7       	brne	.-6      	; 0x6a2 <main+0x138>
		PORTD = (1 << 2);
 6a8:	84 e0       	ldi	r24, 0x04	; 4
 6aa:	8b b9       	out	0x0b, r24	; 11
		Ci = CAP_blocking_in(3, Ucc);
 6ac:	b7 01       	movw	r22, r14
 6ae:	a6 01       	movw	r20, r12
 6b0:	83 e0       	ldi	r24, 0x03	; 3
 6b2:	5d de       	rcall	.-838    	; 0x36e <_Z15CAP_blocking_inal>
		
		if(Ci > 1500){
 6b4:	6d 3d       	cpi	r22, 0xDD	; 221
 6b6:	25 e0       	ldi	r18, 0x05	; 5
 6b8:	72 07       	cpc	r23, r18
 6ba:	81 05       	cpc	r24, r1
 6bc:	91 05       	cpc	r25, r1
 6be:	3c f0       	brlt	.+14     	; 0x6ce <main+0x164>
			leds_capi = (1 << 9) | (1 << 7) | (1 << 6) | (1 << 13) | (1 << 14);
 6c0:	80 ec       	ldi	r24, 0xC0	; 192
 6c2:	92 e6       	ldi	r25, 0x62	; 98
 6c4:	90 93 0d 01 	sts	0x010D, r25
 6c8:	80 93 0c 01 	sts	0x010C, r24
 6cc:	10 c0       	rjmp	.+32     	; 0x6ee <main+0x184>
		} else if(Ci < 500){
 6ce:	64 3f       	cpi	r22, 0xF4	; 244
 6d0:	71 40       	sbci	r23, 0x01	; 1
 6d2:	81 05       	cpc	r24, r1
 6d4:	91 05       	cpc	r25, r1
 6d6:	3c f4       	brge	.+14     	; 0x6e6 <main+0x17c>
			leds_capi = (1 << 9) | (1 << 7) | (1 << 6) | (1 << 13) | (1 << 15);
 6d8:	80 ec       	ldi	r24, 0xC0	; 192
 6da:	92 ea       	ldi	r25, 0xA2	; 162
 6dc:	90 93 0d 01 	sts	0x010D, r25
 6e0:	80 93 0c 01 	sts	0x010C, r24
 6e4:	04 c0       	rjmp	.+8      	; 0x6ee <main+0x184>
		}else{
			leds_capi = 0;
 6e6:	10 92 0d 01 	sts	0x010D, r1
 6ea:	10 92 0c 01 	sts	0x010C, r1
		}
		//if(leds_capi) leds = leds_capi;
		PORTD = (1 << 5) | (1 << 3);
 6ee:	88 e2       	ldi	r24, 0x28	; 40
 6f0:	8b b9       	out	0x0b, r24	; 11
		PORTC = (1 << 5);
 6f2:	80 e2       	ldi	r24, 0x20	; 32
 6f4:	88 b9       	out	0x08, r24	; 8
 6f6:	84 2d       	mov	r24, r4
 6f8:	95 2d       	mov	r25, r5
 6fa:	01 97       	sbiw	r24, 0x01	; 1
		for(i=0;i<100;i++);
 6fc:	00 97       	sbiw	r24, 0x00	; 0
 6fe:	e9 f7       	brne	.-6      	; 0x6fa <main+0x190>
		PORTC = 0;
 700:	18 b8       	out	0x08, r1	; 8
		PORTD = (1 << 2) | (1 << 5);
 702:	84 e2       	ldi	r24, 0x24	; 36
 704:	8b b9       	out	0x0b, r24	; 11
		Co = CAP_blocking_in(1, Ucc);
 706:	b7 01       	movw	r22, r14
 708:	a6 01       	movw	r20, r12
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	30 de       	rcall	.-928    	; 0x36e <_Z15CAP_blocking_inal>
		leds_capo = 0;
		if(Co > 15000){
 70e:	69 39       	cpi	r22, 0x99	; 153
 710:	4a e3       	ldi	r20, 0x3A	; 58
 712:	74 07       	cpc	r23, r20
 714:	81 05       	cpc	r24, r1
 716:	91 05       	cpc	r25, r1
 718:	3c f0       	brlt	.+14     	; 0x728 <main+0x1be>
			leds_capo |= (1 << 9) | (1 << 7) | (1 << 8) | (1 << 13) | (1 << 14);
 71a:	80 e8       	ldi	r24, 0x80	; 128
 71c:	93 e6       	ldi	r25, 0x63	; 99
 71e:	90 93 0b 01 	sts	0x010B, r25
 722:	80 93 0a 01 	sts	0x010A, r24
 726:	10 c0       	rjmp	.+32     	; 0x748 <main+0x1de>
		} else if(Co < 5000){
 728:	68 38       	cpi	r22, 0x88	; 136
 72a:	73 41       	sbci	r23, 0x13	; 19
 72c:	81 05       	cpc	r24, r1
 72e:	91 05       	cpc	r25, r1
 730:	2c f0       	brlt	.+10     	; 0x73c <main+0x1d2>
		PORTC = (1 << 5);
		for(i=0;i<100;i++);
		PORTC = 0;
		PORTD = (1 << 2) | (1 << 5);
		Co = CAP_blocking_in(1, Ucc);
		leds_capo = 0;
 732:	10 92 0b 01 	sts	0x010B, r1
 736:	10 92 0a 01 	sts	0x010A, r1
 73a:	06 c0       	rjmp	.+12     	; 0x748 <main+0x1de>
		if(Co > 15000){
			leds_capo |= (1 << 9) | (1 << 7) | (1 << 8) | (1 << 13) | (1 << 14);
		} else if(Co < 5000){
			leds_capo |= (1 << 9) | (1 << 7) | (1 << 8) | (1 << 13) | (1 << 15);
 73c:	80 e8       	ldi	r24, 0x80	; 128
 73e:	93 ea       	ldi	r25, 0xA3	; 163
 740:	90 93 0b 01 	sts	0x010B, r25
 744:	80 93 0a 01 	sts	0x010A, r24
		}
		//if(leds_capo) leds = leds_capo;

		//leds = leds_tmp;
		PORTD = 0;
 748:	1b b8       	out	0x0b, r1	; 11
		PORTC = 0;
 74a:	18 b8       	out	0x08, r1	; 8
		start_step_up(Ucc);
 74c:	c7 01       	movw	r24, r14
 74e:	b6 01       	movw	r22, r12
 750:	02 df       	rcall	.-508    	; 0x556 <_Z13start_step_upl>
 752:	83 2d       	mov	r24, r3
 754:	92 2d       	mov	r25, r2
 756:	01 97       	sbiw	r24, 0x01	; 1
		for(i=0;i<10000;i++);
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	e9 f7       	brne	.-6      	; 0x756 <main+0x1ec>
		// output z-diode
		PORTD = (1 << 4) | (1 << 3);
 75c:	88 e1       	ldi	r24, 0x18	; 24
 75e:	8b b9       	out	0x0b, r24	; 11
		for(i=0;i<1;i++) measure_vreg_outp_volt();
 760:	64 de       	rcall	.-824    	; 0x42a <_Z22measure_vreg_outp_voltv>
		Uout = measure_vreg_outp_volt();
 762:	63 de       	rcall	.-826    	; 0x42a <_Z22measure_vreg_outp_voltv>
		if(Uout > 870){
 764:	67 36       	cpi	r22, 0x67	; 103
 766:	23 e0       	ldi	r18, 0x03	; 3
 768:	72 07       	cpc	r23, r18
 76a:	81 05       	cpc	r24, r1
 76c:	91 05       	cpc	r25, r1
 76e:	54 f0       	brlt	.+20     	; 0x784 <main+0x21a>
			leds_zo |= (1 << 10) | (1 << 13) | (1 << 14) | (1 << 8); // overvoltage protection not working, too high voltage
 770:	80 91 06 01 	lds	r24, 0x0106
 774:	90 91 07 01 	lds	r25, 0x0107
 778:	95 66       	ori	r25, 0x65	; 101
 77a:	90 93 07 01 	sts	0x0107, r25
 77e:	80 93 06 01 	sts	0x0106, r24
 782:	22 c0       	rjmp	.+68     	; 0x7c8 <main+0x25e>
		} else if(Uout < 50) {
 784:	62 33       	cpi	r22, 0x32	; 50
 786:	71 05       	cpc	r23, r1
 788:	81 05       	cpc	r24, r1
 78a:	91 05       	cpc	r25, r1
 78c:	54 f4       	brge	.+20     	; 0x7a2 <main+0x238>
			leds_zo |= (1 << 11) | (1 << 13) | (1 << 8); // overvoltage protection diode short circuit
 78e:	80 91 06 01 	lds	r24, 0x0106
 792:	90 91 07 01 	lds	r25, 0x0107
 796:	99 62       	ori	r25, 0x29	; 41
 798:	90 93 07 01 	sts	0x0107, r25
 79c:	80 93 06 01 	sts	0x0106, r24
 7a0:	13 c0       	rjmp	.+38     	; 0x7c8 <main+0x25e>
		} else if(Uout < 600){
 7a2:	68 35       	cpi	r22, 0x58	; 88
 7a4:	72 40       	sbci	r23, 0x02	; 2
 7a6:	81 05       	cpc	r24, r1
 7a8:	91 05       	cpc	r25, r1
 7aa:	54 f4       	brge	.+20     	; 0x7c0 <main+0x256>
			leds_zo |= (1 << 10) | (1 << 13) | (1 << 15) | (1 << 8); // overvoltage protection with too low breakdown voltage
 7ac:	80 91 06 01 	lds	r24, 0x0106
 7b0:	90 91 07 01 	lds	r25, 0x0107
 7b4:	95 6a       	ori	r25, 0xA5	; 165
 7b6:	90 93 07 01 	sts	0x0107, r25
 7ba:	80 93 06 01 	sts	0x0106, r24
 7be:	04 c0       	rjmp	.+8      	; 0x7c8 <main+0x25e>
		} else {
			leds_zo = 0;
 7c0:	10 92 07 01 	sts	0x0107, r1
 7c4:	10 92 06 01 	sts	0x0106, r1
		}
		// input z-diode
		PORTD = (1 << 0) | (1 << 3);
 7c8:	89 e0       	ldi	r24, 0x09	; 9
 7ca:	8b b9       	out	0x0b, r24	; 11
		for(i=0;i<1;i++) measure_vreg_inp_volt();
 7cc:	60 de       	rcall	.-832    	; 0x48e <_Z21measure_vreg_inp_voltv>
		Uin = measure_vreg_inp_volt();
 7ce:	5f de       	rcall	.-834    	; 0x48e <_Z21measure_vreg_inp_voltv>
		
		if(Uin > 870){
 7d0:	67 36       	cpi	r22, 0x67	; 103
 7d2:	43 e0       	ldi	r20, 0x03	; 3
 7d4:	74 07       	cpc	r23, r20
 7d6:	81 05       	cpc	r24, r1
 7d8:	91 05       	cpc	r25, r1
 7da:	3c f0       	brlt	.+14     	; 0x7ea <main+0x280>
			leds_zi = (1 << 10) | (1 << 13) | (1 << 14) | (1 << 6); // overvoltage protection not working, too high voltage
 7dc:	80 e4       	ldi	r24, 0x40	; 64
 7de:	94 e6       	ldi	r25, 0x64	; 100
 7e0:	90 93 09 01 	sts	0x0109, r25
 7e4:	80 93 08 01 	sts	0x0108, r24
 7e8:	1c c0       	rjmp	.+56     	; 0x822 <main+0x2b8>
		} else if(Uin < 50) {
 7ea:	62 33       	cpi	r22, 0x32	; 50
 7ec:	71 05       	cpc	r23, r1
 7ee:	81 05       	cpc	r24, r1
 7f0:	91 05       	cpc	r25, r1
 7f2:	3c f4       	brge	.+14     	; 0x802 <main+0x298>
			leds_zi = (1 << 11) | (1 << 13) | (1 << 6); // overvoltage protection diode short circuit
 7f4:	20 e4       	ldi	r18, 0x40	; 64
 7f6:	38 e2       	ldi	r19, 0x28	; 40
 7f8:	30 93 09 01 	sts	0x0109, r19
 7fc:	20 93 08 01 	sts	0x0108, r18
 800:	10 c0       	rjmp	.+32     	; 0x822 <main+0x2b8>
		} else if(Uin < 600){
 802:	68 35       	cpi	r22, 0x58	; 88
 804:	72 40       	sbci	r23, 0x02	; 2
 806:	81 05       	cpc	r24, r1
 808:	91 05       	cpc	r25, r1
 80a:	3c f4       	brge	.+14     	; 0x81a <main+0x2b0>
			leds_zi = (1 << 10) | (1 << 13) | (1 << 15) | (1 << 6); // overvoltage protection with too low breakdown voltage
 80c:	40 e4       	ldi	r20, 0x40	; 64
 80e:	54 ea       	ldi	r21, 0xA4	; 164
 810:	50 93 09 01 	sts	0x0109, r21
 814:	40 93 08 01 	sts	0x0108, r20
 818:	04 c0       	rjmp	.+8      	; 0x822 <main+0x2b8>
		} else {
			leds_zi = 0;
 81a:	10 92 09 01 	sts	0x0109, r1
 81e:	10 92 08 01 	sts	0x0108, r1
		}
		// gnd z-diode
		PORTC = (1 << 5);
 822:	80 e2       	ldi	r24, 0x20	; 32
 824:	88 b9       	out	0x08, r24	; 8
		PORTD = (1 << 2);
 826:	84 e0       	ldi	r24, 0x04	; 4
 828:	8b b9       	out	0x0b, r24	; 11
		for(i=0;i<1;i++) measure_vreg_inp_volt();
 82a:	31 de       	rcall	.-926    	; 0x48e <_Z21measure_vreg_inp_voltv>
		Uin = -measure_vreg_inp_volt();
 82c:	30 de       	rcall	.-928    	; 0x48e <_Z21measure_vreg_inp_voltv>
 82e:	9b 01       	movw	r18, r22
 830:	ac 01       	movw	r20, r24
 832:	88 27       	eor	r24, r24
 834:	99 27       	eor	r25, r25
 836:	dc 01       	movw	r26, r24
 838:	82 1b       	sub	r24, r18
 83a:	93 0b       	sbc	r25, r19
 83c:	a4 0b       	sbc	r26, r20
 83e:	b5 0b       	sbc	r27, r21
		if(Uin > 870){
 840:	87 36       	cpi	r24, 0x67	; 103
 842:	33 e0       	ldi	r19, 0x03	; 3
 844:	93 07       	cpc	r25, r19
 846:	a1 05       	cpc	r26, r1
 848:	b1 05       	cpc	r27, r1
 84a:	3c f0       	brlt	.+14     	; 0x85a <main+0x2f0>
			leds_zg = (1 << 10) | (1 << 13) | (1 << 14) | (1 << 7); // overvoltage protection not working, too high voltage
 84c:	40 e8       	ldi	r20, 0x80	; 128
 84e:	54 e6       	ldi	r21, 0x64	; 100
 850:	50 93 03 01 	sts	0x0103, r21
 854:	40 93 02 01 	sts	0x0102, r20
 858:	1c c0       	rjmp	.+56     	; 0x892 <main+0x328>
		} else if(Uin < 50) {
 85a:	82 33       	cpi	r24, 0x32	; 50
 85c:	91 05       	cpc	r25, r1
 85e:	a1 05       	cpc	r26, r1
 860:	b1 05       	cpc	r27, r1
 862:	3c f4       	brge	.+14     	; 0x872 <main+0x308>
			leds_zg = (1 << 11) | (1 << 13) | (1 << 7); // overvoltage protection diode short circuit
 864:	80 e8       	ldi	r24, 0x80	; 128
 866:	98 e2       	ldi	r25, 0x28	; 40
 868:	90 93 03 01 	sts	0x0103, r25
 86c:	80 93 02 01 	sts	0x0102, r24
 870:	10 c0       	rjmp	.+32     	; 0x892 <main+0x328>
		} else if(Uin < 600){
 872:	88 35       	cpi	r24, 0x58	; 88
 874:	92 40       	sbci	r25, 0x02	; 2
 876:	a1 05       	cpc	r26, r1
 878:	b1 05       	cpc	r27, r1
 87a:	3c f4       	brge	.+14     	; 0x88a <main+0x320>
			leds_zg = (1 << 10) | (1 << 13) | (1 << 15) | (1 << 7); // overvoltage protection with too low breakdown voltage
 87c:	40 e8       	ldi	r20, 0x80	; 128
 87e:	54 ea       	ldi	r21, 0xA4	; 164
 880:	50 93 03 01 	sts	0x0103, r21
 884:	40 93 02 01 	sts	0x0102, r20
 888:	04 c0       	rjmp	.+8      	; 0x892 <main+0x328>
		} else {
			leds_zg = 0;
 88a:	10 92 03 01 	sts	0x0103, r1
 88e:	10 92 02 01 	sts	0x0102, r1
		}
		// output to input z-diode
		PORTC = (1 << 5);
 892:	80 e2       	ldi	r24, 0x20	; 32
 894:	88 b9       	out	0x08, r24	; 8
		PORTD = (1 << 4);		
 896:	80 e1       	ldi	r24, 0x10	; 16
 898:	8b b9       	out	0x0b, r24	; 11
		measure_vreg_inout_volt();
 89a:	2b de       	rcall	.-938    	; 0x4f2 <_Z23measure_vreg_inout_voltv>
		Uinout = -measure_vreg_inout_volt();
 89c:	2a de       	rcall	.-940    	; 0x4f2 <_Z23measure_vreg_inout_voltv>
 89e:	9b 01       	movw	r18, r22
 8a0:	ac 01       	movw	r20, r24
 8a2:	88 27       	eor	r24, r24
 8a4:	99 27       	eor	r25, r25
 8a6:	dc 01       	movw	r26, r24
 8a8:	82 1b       	sub	r24, r18
 8aa:	93 0b       	sbc	r25, r19
 8ac:	a4 0b       	sbc	r26, r20
 8ae:	b5 0b       	sbc	r27, r21
		if(Uinout > 870){
 8b0:	87 36       	cpi	r24, 0x67	; 103
 8b2:	33 e0       	ldi	r19, 0x03	; 3
 8b4:	93 07       	cpc	r25, r19
 8b6:	a1 05       	cpc	r26, r1
 8b8:	b1 05       	cpc	r27, r1
 8ba:	3c f0       	brlt	.+14     	; 0x8ca <main+0x360>
			leds_zio = (1 << 10) | (1 << 13) | (1 << 14) | (1 << 6) | (1 << 8); // overvoltage protection not working, too high voltage
 8bc:	40 e4       	ldi	r20, 0x40	; 64
 8be:	55 e6       	ldi	r21, 0x65	; 101
 8c0:	50 93 05 01 	sts	0x0105, r21
 8c4:	40 93 04 01 	sts	0x0104, r20
 8c8:	1a c0       	rjmp	.+52     	; 0x8fe <main+0x394>
		} else if(Uinout < 50) {
 8ca:	82 33       	cpi	r24, 0x32	; 50
 8cc:	91 05       	cpc	r25, r1
 8ce:	a1 05       	cpc	r26, r1
 8d0:	b1 05       	cpc	r27, r1
 8d2:	3c f4       	brge	.+14     	; 0x8e2 <main+0x378>
			leds_zio = (1 << 11) | (1 << 13) | (1 << 6) | (1 << 8); // overvoltage protection diode short circuit
 8d4:	80 e4       	ldi	r24, 0x40	; 64
 8d6:	99 e2       	ldi	r25, 0x29	; 41
 8d8:	90 93 05 01 	sts	0x0105, r25
 8dc:	80 93 04 01 	sts	0x0104, r24
 8e0:	0e c0       	rjmp	.+28     	; 0x8fe <main+0x394>
		} else if(Uinout < 600){
 8e2:	88 35       	cpi	r24, 0x58	; 88
 8e4:	92 40       	sbci	r25, 0x02	; 2
 8e6:	a1 05       	cpc	r26, r1
 8e8:	b1 05       	cpc	r27, r1
 8ea:	2c f4       	brge	.+10     	; 0x8f6 <main+0x38c>
			leds_zio = (1 << 10) | (1 << 13) | (1 << 15) | (1 << 6) | (1 << 8); // overvoltage protection with too low breakdown voltage
 8ec:	10 93 05 01 	sts	0x0105, r17
 8f0:	00 93 04 01 	sts	0x0104, r16
 8f4:	04 c0       	rjmp	.+8      	; 0x8fe <main+0x394>
		} else {
			leds_zio = 0;
 8f6:	10 92 05 01 	sts	0x0105, r1
 8fa:	10 92 04 01 	sts	0x0104, r1
	OCR0A = 70 * 200000/Ucc +132;
}

void stop_step_up(void)
{
	OCR0A = 0;
 8fe:	17 bc       	out	0x27, r1	; 39
		//if(leds_z) leds = leds_z;
		stop_step_up();

		//leds_tmp |= leds_capi | leds_capo | leds_zi;
		//leds = Co;
		if(!(leds_tmp & (1 << 13))){
 900:	80 91 0e 01 	lds	r24, 0x010E
 904:	90 91 0f 01 	lds	r25, 0x010F
 908:	95 fd       	sbrc	r25, 5
 90a:	64 ce       	rjmp	.-824    	; 0x5d4 <main+0x6a>
			leds_tmp |= (1 << 12);
 90c:	90 61       	ori	r25, 0x10	; 16
 90e:	90 93 0f 01 	sts	0x010F, r25
 912:	80 93 0e 01 	sts	0x010E, r24
 916:	5e ce       	rjmp	.-836    	; 0x5d4 <main+0x6a>
		// check output voltage
		PORTC = 0;
		PORTD = 1 + 8;
		measure_vreg_outp_volt(); // dummy read/wait
		Uout = measure_vreg_outp_volt();
		leds_v = ADC2LED(Uout);
 918:	90 93 01 01 	sts	0x0101, r25
 91c:	80 93 00 01 	sts	0x0100, r24
{
	OCR0A = 0;
}

int main(void)
{
 920:	c6 2d       	mov	r28, r6
 922:	d7 2d       	mov	r29, r7
 924:	c8 2c       	mov	r12, r8
 926:	d9 2c       	mov	r13, r9
 928:	ea 2c       	mov	r14, r10
 92a:	fb 2c       	mov	r15, r11
 92c:	7b ce       	rjmp	.-778    	; 0x624 <main+0xba>

0000092e <__divmodsi4>:
 92e:	05 2e       	mov	r0, r21
 930:	97 fb       	bst	r25, 7
 932:	16 f4       	brtc	.+4      	; 0x938 <__divmodsi4+0xa>
 934:	00 94       	com	r0
 936:	0f d0       	rcall	.+30     	; 0x956 <__negsi2>
 938:	57 fd       	sbrc	r21, 7
 93a:	05 d0       	rcall	.+10     	; 0x946 <__divmodsi4_neg2>
 93c:	1e d0       	rcall	.+60     	; 0x97a <__udivmodsi4>
 93e:	07 fc       	sbrc	r0, 7
 940:	02 d0       	rcall	.+4      	; 0x946 <__divmodsi4_neg2>
 942:	46 f4       	brtc	.+16     	; 0x954 <__divmodsi4_exit>
 944:	08 c0       	rjmp	.+16     	; 0x956 <__negsi2>

00000946 <__divmodsi4_neg2>:
 946:	50 95       	com	r21
 948:	40 95       	com	r20
 94a:	30 95       	com	r19
 94c:	21 95       	neg	r18
 94e:	3f 4f       	sbci	r19, 0xFF	; 255
 950:	4f 4f       	sbci	r20, 0xFF	; 255
 952:	5f 4f       	sbci	r21, 0xFF	; 255

00000954 <__divmodsi4_exit>:
 954:	08 95       	ret

00000956 <__negsi2>:
 956:	90 95       	com	r25
 958:	80 95       	com	r24
 95a:	70 95       	com	r23
 95c:	61 95       	neg	r22
 95e:	7f 4f       	sbci	r23, 0xFF	; 255
 960:	8f 4f       	sbci	r24, 0xFF	; 255
 962:	9f 4f       	sbci	r25, 0xFF	; 255
 964:	08 95       	ret

00000966 <__muluhisi3>:
 966:	2b d0       	rcall	.+86     	; 0x9be <__umulhisi3>
 968:	a5 9f       	mul	r26, r21
 96a:	90 0d       	add	r25, r0
 96c:	b4 9f       	mul	r27, r20
 96e:	90 0d       	add	r25, r0
 970:	a4 9f       	mul	r26, r20
 972:	80 0d       	add	r24, r0
 974:	91 1d       	adc	r25, r1
 976:	11 24       	eor	r1, r1
 978:	08 95       	ret

0000097a <__udivmodsi4>:
 97a:	a1 e2       	ldi	r26, 0x21	; 33
 97c:	1a 2e       	mov	r1, r26
 97e:	aa 1b       	sub	r26, r26
 980:	bb 1b       	sub	r27, r27
 982:	fd 01       	movw	r30, r26
 984:	0d c0       	rjmp	.+26     	; 0x9a0 <__udivmodsi4_ep>

00000986 <__udivmodsi4_loop>:
 986:	aa 1f       	adc	r26, r26
 988:	bb 1f       	adc	r27, r27
 98a:	ee 1f       	adc	r30, r30
 98c:	ff 1f       	adc	r31, r31
 98e:	a2 17       	cp	r26, r18
 990:	b3 07       	cpc	r27, r19
 992:	e4 07       	cpc	r30, r20
 994:	f5 07       	cpc	r31, r21
 996:	20 f0       	brcs	.+8      	; 0x9a0 <__udivmodsi4_ep>
 998:	a2 1b       	sub	r26, r18
 99a:	b3 0b       	sbc	r27, r19
 99c:	e4 0b       	sbc	r30, r20
 99e:	f5 0b       	sbc	r31, r21

000009a0 <__udivmodsi4_ep>:
 9a0:	66 1f       	adc	r22, r22
 9a2:	77 1f       	adc	r23, r23
 9a4:	88 1f       	adc	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	1a 94       	dec	r1
 9aa:	69 f7       	brne	.-38     	; 0x986 <__udivmodsi4_loop>
 9ac:	60 95       	com	r22
 9ae:	70 95       	com	r23
 9b0:	80 95       	com	r24
 9b2:	90 95       	com	r25
 9b4:	9b 01       	movw	r18, r22
 9b6:	ac 01       	movw	r20, r24
 9b8:	bd 01       	movw	r22, r26
 9ba:	cf 01       	movw	r24, r30
 9bc:	08 95       	ret

000009be <__umulhisi3>:
 9be:	a2 9f       	mul	r26, r18
 9c0:	b0 01       	movw	r22, r0
 9c2:	b3 9f       	mul	r27, r19
 9c4:	c0 01       	movw	r24, r0
 9c6:	a3 9f       	mul	r26, r19
 9c8:	01 d0       	rcall	.+2      	; 0x9cc <__umulhisi3+0xe>
 9ca:	b2 9f       	mul	r27, r18
 9cc:	70 0d       	add	r23, r0
 9ce:	81 1d       	adc	r24, r1
 9d0:	11 24       	eor	r1, r1
 9d2:	91 1d       	adc	r25, r1
 9d4:	08 95       	ret

000009d6 <_exit>:
 9d6:	f8 94       	cli

000009d8 <__stop_program>:
 9d8:	ff cf       	rjmp	.-2      	; 0x9d8 <__stop_program>
